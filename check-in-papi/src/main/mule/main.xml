<?xml version="1.0" encoding="UTF-8"?>
<!-- #%L MuleSoft Training - Anypoint Platform Development: Level 2 %% Copyright (C) 2019 - 2021 MuleSoft, Inc. All rights reserved. http://www.mulesoft.com 
	%% The software in this package is published under the terms of the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International 
	Public License, a copy of which has been included with this distribution in the LICENSE.txt file. #L% -->
<mule xmlns:pay-pal-sapi="http://www.mulesoft.org/schema/mule/pay-pal-sapi"
	xmlns:passenger-data-sapi="http://www.mulesoft.org/schema/mule/passenger-data-sapi"
	xmlns:flights-management-sapi="http://www.mulesoft.org/schema/mule/flights-management-sapi"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:api-gateway="http://www.mulesoft.org/schema/mule/api-gateway"
	xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:tracing="http://www.mulesoft.org/schema/mule/tracing"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd  http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd  http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd  http://www.mulesoft.org/schema/mule/api-gateway http://www.mulesoft.org/schema/mule/api-gateway/current/mule-api-gateway.xsd  http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd   http://www.mulesoft.org/schema/mule/tracing http://www.mulesoft.org/schema/mule/tracing/current/mule-tracing.xsd
http://www.mulesoft.org/schema/mule/flights-management-sapi http://www.mulesoft.org/schema/mule/flights-management-sapi/current/mule-flights-management-sapi.xsd
http://www.mulesoft.org/schema/mule/passenger-data-sapi http://www.mulesoft.org/schema/mule/passenger-data-sapi/current/mule-passenger-data-sapi.xsd
http://www.mulesoft.org/schema/mule/pay-pal-sapi http://www.mulesoft.org/schema/mule/pay-pal-sapi/current/mule-pay-pal-sapi.xsd">
	<flow name="check-in-by-pnr">
		<tracing:set-logging-variable variableName="PNR" value="#[vars.PNR default '']"
			doc:name="Set PNR tracing var" />
		<logger level="INFO" message="#['Checking-in by PNR: ' ++ (vars.PNR default '')]" doc:name="START" />
		<set-variable variableName="checkIn" value="#[payload]" doc:name="checkIn" />
		<flow-ref doc:name="validate-ticket-passport-matches" doc:id="f87957c0-494a-4c60-b6d7-de62df410137"
			name="validate-ticket-passport-matches" />
		<set-variable variableName="allCompensationFlows"
			value="#[['check-in-flights-management-compensate', 'register-passenger-data-compensate', 'create-payment-for-bags-compensate']]"
			doc:name="allCompensationFlows" />
		<try doc:name="Try" doc:id="003c6058-6244-4b45-b2e2-7dbdbdf15f40">
			<scatter-gather doc:name="Scatter-Gather" doc:id="207b4d96-9c99-4c0c-8a97-84e443971b84">
				<route>
					<flow-ref name="check-in-flights-management" doc:name="check-in-flights-management" />
				</route>
				<route>
					<flow-ref name="register-passenger-data" doc:name="register-passenger-data" />
				</route>
				<route>
					<flow-ref name="create-payment-for-bags" doc:name="create-payment-for-bags" />
				</route>
			</scatter-gather>
			<error-handler>
				<on-error-propagate type="MULE:COMPOSITE_ROUTING">
					<set-variable variableName="successfulRouteIndexes" value="#[(error.errorMessage.payload.results pluck $$ as Number)]"
						doc:name="successfulRouteIndexes" />
					<set-variable variableName="failedRouteIndexes" value="#[(error.errorMessage.payload.failures pluck $$ as Number)]"
						doc:name="failedRouteIndexes" />
					<set-variable variableName="compensationFlows" value="#[vars.successfulRouteIndexes map vars.allCompensationFlows[$]]"
						doc:name="compensationFlows" />
					<flow-ref name="compensate-successful-routes-of-check-in-by-pnr" doc:name="compensate-successful-routes-of-check-in-by-pnr" />
				</on-error-propagate>
			</error-handler>
		</try>
		<ee:transform doc:name="paymentID: paypalReturn.paymentID">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
				        output application/json
				        var paypalReturn = payload['2'].payload
				        ---
				        {
				            paymentID: paypalReturn.paymentID
				        }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
		<logger level="INFO" message="Checked-in by PNR" doc:name="END" />
	</flow>
	
	<flow name="compensate-successful-routes-of-check-in-by-pnr">
	    <foreach collection="#[vars.compensationFlows]">
	      <flow-ref name="#[payload]" doc:name="successedFlows"/>
	    </foreach>
	</flow>
	
	
	
	  <flow name="check-in-flights-management-compensate">
    <logger level="INFO" message="Must compensate for successful check-in-flights-management" doc:name="Must compensate for successful check-in-flights-management"/>
  </flow>
  <flow name="register-passenger-data-compensate">
    <logger level="INFO" message="Must compensate for successful register-passenger-data" doc:name="Must compensate for successful register-passenger-data"/>
  </flow>
  <flow name="create-payment-for-bags-compensate">
    <logger level="INFO" message="Must compensate for successful create-payment-for-bags" doc:name="Must compensate for successful create-payment-for-bags"/>
  </flow>
	
	
	
	
	
	
	<flow name="validate-ticket-passport-matches" doc:id="b04e6c1c-58eb-49ec-942e-20ad7b804c8c">
		<flow-ref name="get-ticket-by-pnr" doc:name="get-ticket-by-pnr" />
		<choice doc:name="Ticket holder name check">
			<when expression="#[not vars.ticket.ticketHolderLastName == vars.checkIn.lastName]">
				<raise-error type="APP:LASTNAME_MISMATCH" />
			</when>
		</choice>
		<flow-ref name="get-passenger-data-by-passport" doc:name="get-passenger-data-by-passport" />
		<choice doc:name="Passenger name check">
			<when expression="#[not vars.passenger.lastName == vars.checkIn.lastName]">
				<raise-error type="APP:LASTNAME_MISMATCH" />
			</when>
		</choice>
	</flow>
	<flow name="get-ticket-by-pnr">
		<flights-management-sapi:get-ticket-by-pnr pnr="#[vars.PNR]" target="ticket"
			config-ref="flightsManagementSapiConfig" />
	</flow>
	<flow name="get-passenger-data-by-passport">
		<passenger-data-sapi:get-passengers passport-no="#[vars.ticket.ticketHolderPassPortNo]"
			target="passenger" config-ref="passengerDataSapiConfig" />
	</flow>
	<flow name="check-in-flights-management">
		<ee:transform>
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0 output application/json
        ---
        {
            lastName: vars.checkIn.lastName,
            numBags:  vars.checkIn.numBags
        }]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flights-management-sapi:update-checkins-by-pnr config-ref="flightsManagementSapiConfig"
			pnr="#[vars.PNR]" />
	</flow>
	<flow name="register-passenger-data">
		<ee:transform>
		    <ee:message>
		        <ee:set-payload><![CDATA[%dw 2.0
		        output application/json
		        ---
		        {
		            "date_checkin": now() >> "UTC",
		            "destination":  vars.ticket.destination,
		            "flight_date":  vars.ticket.flightDate,
		            "flight_no":    vars.ticket.flightNo,
		            "origin":       vars.ticket.origin
		        }
		        ]]></ee:set-payload>
		    </ee:message>
		</ee:transform>
		<passenger-data-sapi:create-flight-by-lno lno="#[vars.passenger.loyaltyNo]" config-ref="passengerDataSapiConfig"  />
		<error-handler>
		    <on-error-continue>
		    <raise-error type="APP:CANT_CREATE_PASSENGER_FLIGHT"  />
		    </on-error-continue>
		</error-handler>
	</flow>
	<flow name="create-payment-for-bags">
		<ee:transform>
		    <ee:message>
		        <ee:set-payload><![CDATA[%dw 2.0
		        output application/json
		        var numBags = vars.checkIn.numBags
		        var bagRate = 33.3
		        ---
		        {
		            description: "Check-In of $(numBags) bags at USD $(bagRate) each.",
		            amount: bagRate*numBags
		        }]]></ee:set-payload>
		    </ee:message>
		</ee:transform>
		<pay-pal-sapi:create-payment config-ref="paypalSapiConfig"  />
		<error-handler>
		    <on-error-continue>
		        <raise-error type="APP:CANT_CREATE_PAYMENT"  doc:name="APP:CANT_CREATE_PAYMENT"/>
		    </on-error-continue>
		</error-handler>
	</flow>
	<flow name="payment-approval-by-pnr">
		<logger level="INFO" message="#['Approving payment by PNR: ' ++ (vars.PNR default '')]" doc:name="START" />
		<flow-ref name="update-approvals" doc:name="update-approvals" />
		<flow-ref name="get-boarding-pass" doc:name="get-boarding-pass" />
		<logger level="INFO" message="Approved payment by PNR" doc:name="END" />
	</flow>
	<flow name="update-approvals">
		<ee:transform>
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
                output application/json
                ---
                {
                  status: "Payment Executed"
                }]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="get-boarding-pass">
		<ee:transform>
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
                output application/json
                ---
                {
                  PNR: "928382J",
                  airportArrive: "SFO",
                  class: "Economy",
                  bagsCount: 2,
                  lastName: "Smith",
                  seat: "16C",
                  flightDate: "2019-02-14",
                  flight: "ANY6584",
                  boarding: "13:15:00",
                  airportDepart: "ATL",
                  gate: "4A",
                  depart: "14:30:00"
                }]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>